version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: movie-review-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-movie_review_db}
      POSTGRES_USER: ${DB_USERNAME:-movieuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-moviepass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-movieuser} -d ${DB_NAME:-movie_review_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: movie-review-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot API Server
  movie-review-api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: movie-review-api-prod
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_USERNAME: ${DB_USERNAME:-movieuser}
      DB_PASSWORD: ${DB_PASSWORD:-moviepass}
      JWT_SECRET: ${JWT_SECRET:-mySecretKeyForMovieReviewAPI2024}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  movie-review-frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://localhost:8080/api/v1}
    container_name: movie-review-frontend-prod
    restart: always
    depends_on:
      movie-review-api:
        condition: service_healthy
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: movie-review-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - movie-review-frontend
      - movie-review-api
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  movie-review-network:
    driver: bridge
