version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: movie-review-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: movie_review_db
      POSTGRES_USER: movieuser
      POSTGRES_PASSWORD: moviepass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movieuser -d movie_review_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: movie-review-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot API Server
  movie-review-api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: movie-review-api
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: movieuser
      DB_PASSWORD: moviepass
      JWT_SECRET: mySecretKeyForMovieReviewAPI2024
      JWT_EXPIRATION: 86400000
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  movie-review-frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: movie-review-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      movie-review-api:
        condition: service_healthy
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: movie-review-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - movie-review-frontend
      - movie-review-api
    networks:
      - movie-review-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  movie-review-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
